<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="AE" owner="ED" desc="Checks if SVG DOM ECMA Script binding is supported" status="accepted"
    approved="yes"
    version="$Revision: 1.8 $" testname="$RCSfile: udom-over-01-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        Verify the basic capability to handle the SVG DOM API.
        The test is composed of a top level svg element with an 'onload' event handler and a rect element.
        Both the svg and the rect elements have an identifier. The 'onload' handler invokes SVG-specific DOM API methods which use these identifiers.
      </p>
      <p>
        First, the handler gets the SVG root element and checks it has the expected identifier.
        Then, the handler accesses the coordinates of the rect element and uses them to build a 'shadow' rectangle under the existing one.
        Finally, the 'shadow' rectangle is created using the createElementNS method.
      </p>
      <p>
        If an implementation supports the ECMAScript DOM binding for SVG, then the image must show the following text:
        "This document's root identifier is: svg-root" and a red rectangle with a black shadow rectangle. Otherwise, only a red rectangle will show.
      </p>
      <p>The rendered picture should match the reference image.</p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-over-01-t.svg,v $</title>
  <defs>
    <font-face font-family="SVGFreeSansASCII" unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii" />
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">
    <handler xe:observer="svg-root" xe:event="SVGLoad">
      domTest(evt);
    </handler>
    <script type="text/ecmascript">
      <![CDATA[
    function domTest(evt) {
        var svg_ns = "http://www.w3.org/2000/svg";
    // Get Document
      var target = evt.target;
    var doc = target.ownerDocument;
    var rect = doc.getElementById("rectId");
    var rootSVG = document.documentElement;
    var rootId = rootSVG.getAttributeNS("http://www.w3.org/XML/1998/namespace", "id");
    // Insert a new text element to the DOM tree using the id
    var newText = doc.createElementNS(svg_ns, 'text');
    newText.setAttribute('x', '50');
    newText.setAttribute('y', '100');
    var message = "This document's root identifier is: " + rootId
    newText.textContent = message;
    rect.parentNode.appendChild(newText);
    //
    // Now, check that our rectangle is an instance of SVGRect by accessing
    // specific methods in order to get its x, y, width and height attributes.
    //
    var x = rect.getFloatTrait("x");
    var y = rect.getFloatTrait("y");
    var width = rect.getFloatTrait("width"); 
    var height = rect.getFloatTrait("height");
    //
    // Now, build a new svg rect element.
    //
    var newRect = doc.createElementNS(svg_ns, 'rect');
    //
    // Set the x, y, width and height of this element
    //
    newRect.setFloatTrait("x", x + 10);
        newRect.setFloatTrait("y", y + 10);
        newRect.setAttribute("width", width);
        newRect.setAttribute("height", height);
    //
    // Insert new element in DOM tree
    //
    rect.parentNode.insertBefore(newRect, rect);
    }
  ]]>
    </script>
    <rect xml:id="rectId" x="40" y="150" width="50" height="50" fill="red" />
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none" fill="black">$Revision: 1.8 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000" />
  <!-- comment out this watermark once the test is approved -->
  <!--<g xml:id="draft-watermark"> 
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1" /> 
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240" text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text> 
  </g>-->
</svg>

<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root"
	width="480" height="360"
	viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="ED" owner="AE" desc="Test SVGLocatable.getScreenCTM" status="accepted"
    approved="yes"
    version="$Revision: 1.9 $" testname="$RCSfile: udom-svglocatable-203-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">

      <p>
        This test draws a few basic shapes and checks for correct values from getScreenCTM().
        To pass, each returned CTM must be correct (indicated by printing the values in green),
        and the string 'passed' appears in the lower right.
      </p>
      <p>
        Note, this test does not have 100% for the svg width and height on purpose as to have exact
        expected results for the screen CTM.
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-svglocatable-203-t.svg,v $</title>
  <defs>
    <font-face
      font-family="SVGFreeSansASCII"
      unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii"/>
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">

    <handler type="text/ecmascript" xe:event="SVGLoad">
      <![CDATA[
  
      var svg_ns = "http://www.w3.org/2000/svg";
      var xlink_ns = "http://www.w3.org/1999/xlink";
  
      var count=0;
      var topsvg = document.documentElement;
      var startY = 80;
      var rowHeight = 12;
      var fontSize = "10";
      var isPassed = true;
      var eps = 1 / 65535; // epsilon for 16.16 fixpoint
  
 function drawString( text, color )
{
  node_to_insert=document.createElementNS(svg_ns,"text");
  node_to_insert.setAttributeNS(null,"font-size",fontSize);	
  var xVal = 5;
  node_to_insert.setAttributeNS(null,"x", xVal.toString() );	
  var yVal = startY + count++ * rowHeight;
  node_to_insert.setAttributeNS(null, "y",  yVal.toString()  );
  node_to_insert.setAttributeNS(null, "fill",  color  );
  node_to_insert.textContent=text ;
  document.getElementById( "test-body-content" ).appendChild(node_to_insert);          
 
}
  
      function verifyMatrix( matrix, expected, epsilon )
      {
        if
        (
          ( Math.abs(matrix.getComponent(0) - expected[0]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(1) - expected[1]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(2) - expected[2]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(3) - expected[3]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(4) - expected[4]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(5) - expected[5]) < epsilon )
        )
        {
        return "green";
        }
        else
        {
          isPassed = false;
          drawString( "Results do not match expected values ( " 
                                   + expected[0].toString() + " " 
                                   + expected[1].toString() + " " 
                                   + expected[2].toString() + " " 
                                   + expected[3].toString() + " " 
                                   + expected[4].toString() + " " 
                                   + expected[5].toString() + " )", "red" );
             return "red"
        }
      }
  
      function displayScreenCTM()
      {
        var expected;
      
        drawString( "getScreenCTM()", "black" );      
        drawString ("", "black");
        
        var matrix = document.getElementById( "group1" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 310, 120 ];
        drawString( "[group1] " + matrix.getComponent(0).toString() + " " 
                                + matrix.getComponent(1).toString() + " " 
                                + matrix.getComponent(2).toString() + " " 
                                + matrix.getComponent(3).toString() + " " 
                                + matrix.getComponent(4).toString() + " " 
                                + matrix.getComponent(5).toString() ,   verifyMatrix( matrix, expected, eps ));
       ;
  
        var matrix = document.getElementById( "rect1" ).getScreenCTM( );
                expected = [ 2, 0, 0, 2, 310, 120 ];
        drawString( "[rect1] " + matrix.getComponent(0).toString() + " " 
                               + matrix.getComponent(1).toString() + " " 
                               + matrix.getComponent(2).toString() + " " 
                               + matrix.getComponent(3).toString() + " " 
                               + matrix.getComponent(4).toString() + " " 
                               + matrix.getComponent(5).toString() ,   verifyMatrix( matrix, expected, eps ));

  
        var matrix = document.getElementById( "rect2" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 310, 120 ];
        drawString( "[rect2] " + matrix.getComponent(0).toString() + " " 
                               + matrix.getComponent(1).toString() + " " 
                               + matrix.getComponent(2).toString() + " " 
                               + matrix.getComponent(3).toString() + " " 
                               + matrix.getComponent(4).toString() + " " 
                               + matrix.getComponent(5).toString() ,  verifyMatrix( matrix, expected, eps ));
      
        var matrix = document.getElementById( "group2" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 320, 140 ];
        drawString( "[group2] " + matrix.getComponent(0).toString() + " " 
                                + matrix.getComponent(1).toString() + " " 
                                + matrix.getComponent(2).toString() + " " 
                                + matrix.getComponent(3).toString() + " " 
                                + matrix.getComponent(4).toString() + " " 
                                + matrix.getComponent(5).toString() ,   verifyMatrix( matrix, expected, eps ));
  
        var matrix = document.getElementById( "rect3" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 320, 140 ];
        drawString("[rect3] " + matrix.getComponent(0).toString() + " " 
                              + matrix.getComponent(1).toString() + " " 
                              + matrix.getComponent(2).toString() + " " 
                              + matrix.getComponent(3).toString() + " " 
                              + matrix.getComponent(4).toString() + " " 
                              + matrix.getComponent(5).toString() ,  verifyMatrix( matrix, expected, eps ));
      
        var matrix = document.getElementById( "circle1" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 320, 140 ];
        drawString( "[circle1] " + matrix.getComponent(0).toString() + " " 
                                 + matrix.getComponent(1).toString() + " " 
                                 + matrix.getComponent(2).toString() + " " 
                                 + matrix.getComponent(3).toString() + " " 
                                 + matrix.getComponent(4).toString() + " " 
                                 + matrix.getComponent(5).toString() , verifyMatrix( matrix, expected, eps ));
      }
  
      displayScreenCTM();

      var matrix = document.getElementById( "rect5" ).getScreenCTM( );
            expected = [ 0.707118, 0.707118, -0.707103, 0.707118, 197.57355, -116.98516 ];
      drawString( "[rect5] " + matrix.getComponent(0).toFixed(3) + " " 
                             + matrix.getComponent(1).toFixed(3) + " " 
                             + matrix.getComponent(2).toFixed(3) + " " 
                             + matrix.getComponent(3).toFixed(3) + " " 
                             + matrix.getComponent(4).toFixed(3) + " " 
                             + matrix.getComponent(5).toFixed(3), verifyMatrix( matrix, expected, 0.004 ));
  

        var matrix = document.getElementById( "circle2" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 300, 100 ];
        drawString( "[circle2] " + matrix.getComponent(0).toString() + " " 
                                 + matrix.getComponent(1).toString() + " " 
                                 + matrix.getComponent(2).toString() + " " 
                                 + matrix.getComponent(3).toString() + " " 
                                 + matrix.getComponent(4).toString() + " " 
                                 + matrix.getComponent(5).toString() , verifyMatrix( matrix, expected, eps ));

        var matrix = document.getElementById( "circle3" ).getScreenCTM( );
                expected = [ 1, 0, 0, 1, 300, 100 ];
        drawString( "[circle3] " + matrix.getComponent(0).toString() + " " 
                                 + matrix.getComponent(1).toString() + " " 
                                 + matrix.getComponent(2).toString() + " " 
                                 + matrix.getComponent(3).toString() + " " 
                                 + matrix.getComponent(4).toString() + " " 
                                 + matrix.getComponent(5).toString() , verifyMatrix( matrix, expected, eps ));

      var matrix1 = topsvg.createSVGMatrixComponents(1, 0, 0, 1, 10, 10);
      var matrix2 = topsvg.createSVGMatrixComponents(1, 0, 0, 1, 20, 30);
      document.getElementById( "group3" ).setMatrixTrait("transform", matrix1);
      document.getElementById( "rect4" ).setMatrixTrait("transform", matrix2);
      var matrix = document.getElementById( "rect4" ).getScreenCTM( );
            expected = [ 1, 0, 0, 1, 330, 140 ];
      drawString( "[rect4] " + matrix.getComponent(0).toString() + " " 
                             + matrix.getComponent(1).toString() + " " 
                             + matrix.getComponent(2).toString() + " " 
                             + matrix.getComponent(3).toString() + " " 
                             + matrix.getComponent(4).toString() + " " 
                             + matrix.getComponent(5).toString(), verifyMatrix( matrix, expected, eps ));
  
      // Expected matrix is the first multiplied by the second matrix.
      matrix = matrix1.mMultiply(matrix2);
           expected = [ 1, 0, 0, 1, 30, 40 ];
      drawString( "[matrix1*matrix2] " + matrix.getComponent(0).toString() + " " 
                                      + matrix.getComponent(1).toString() + " " 
                                      + matrix.getComponent(2).toString() + " " 
                                      + matrix.getComponent(3).toString() + " " 
                                      + matrix.getComponent(4).toString() + " " 
                                      + matrix.getComponent(5).toString(),  verifyMatrix( matrix, expected, eps ));

      if( isPassed )
      {
        var status = document.getElementById("TestStatus");
        status.setTrait( "#text", "passed" );
      }
  
      ]]>
    </handler>

    <g xml:id="body-content">

      <g xml:id="wrap" transform="translate(300,100)">
        <g xml:id="group1" transform="translate(10, 20)" fill="#ff0">
          <rect xml:id="rect1" transform="scale(2)" x="10" y="10" width="50" height="50"/>
          <rect xml:id="rect2" x="10" y="10" width="100" height="100"/>
          <g xml:id="group2" transform="translate(10, 20)">
            <rect xml:id="rect3" x="0" y="10" width="150" height="50"/>
            <circle xml:id="circle1" cx="20" cy="20" r="100" />
          </g>
        </g>
        <circle xml:id="circle2" cx="100" cy="20" r="100" fill="#ff0"/>
        <circle xml:id="circle3" cx="400" cy="20" r="100" fill="#ff0"/>

        <g xml:id="group3">
          <rect fill="none" xml:id="rect4" x="10" y="10" width="50" height="50"/>
        </g>
      </g>

      <g xml:id="group4" transform="rotate(45, 240, 180)">
        <rect xml:id="rect5" x="0" y="10" width="150" height="50" fill="#ff0"/>
      </g>

      <text  x="240" y="40" text-anchor="middle" >SVGLocatable.getScreenCTM() - basic test</text>

    </g>

    <rect x="330" y="315" width="130" height="40" stroke="blue" fill="none"/>
    <g fill="black">
      <text xml:id="TestStatus" x="333" y="350" font-size="40">failed</text>
    </g>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none"
      fill="black">$Revision: 1.9 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000"/>
  <!--<g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>-->
</svg>

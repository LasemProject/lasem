<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="AG" owner="AE" desc="Testing SVGGlobal postURL's callback status" status="accepted"
    approved="yes"
    version="$Revision: 1.5 $" testname="$RCSfile: udom-glob-203-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This SVG will test the SVGGlobal's postURL() callback status. The test
        is passed if, on each row,  both squares have the same color.
      </p>
      <p>
        There are multiple calls to postURL(), each with a different expected
        HTTP return code.
      </p>
      <p>
        The test works in conjunction with a JSP servlet called HttpCodeTest,
        which will simulate the various HTTP return codes, based on the query
        parameter from the client.
      </p>
      <p>
        For each call to postURL(), two squares will appear. The first square
        represents the "expected" status code. The second square represents the
        "actual" status code that the callback function receives. The status
        codes are color-coded.
      </p>
      <p>
        Note that the status codes may take some time to update, due to the
        asynchronous nature of the postURL() callback. Tester should allow some
        time for all postURL() calls to receive ther return codes. The latency
        will vary depending on the network environment, but normally, it should
        only be a couple minutes at most.
      </p>
      <p>
        100-ranges status codes are not tested here because the spec states that
        these status codes should be ignored. It is not clear what the expected
        callback status should be in this case.
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-glob-203-t.svg,v $</title>
  <defs>
    <font-face font-family="SVGFreeSansASCII" unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii" />
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">
    <g xml:id="title" transform="translate(20,50)">
      <text xml:id="expected" x="0" y="0" fill="black">Testing SVGGlobal postURL's callback status </text>
    </g>
    <g xml:id="rowgroup" transform="translate(270,80)">
      <text xml:id="expected" text-anchor="middle" x="40" y="0" font-size="10" fill="black">expected</text>
      <text xml:id="actual" text-anchor="middle" x="90" y="0" font-size="10" fill="black">actual</text>
    </g>
    <script xml:id='script1' type='application/ecmascript'>
      <![CDATA[
      // This can be changed if the test is run locally.
      var servlet_url = "http://www.w3.org/2008/04/http";
      var j = 0;

      var ids = 'rowgroup script1'.split(' ');
      for (var i in ids)
      {
        this[ids[i]] = document.getElementById(ids[i]);
      }

      // Valid values for expected_status: true, false, none
      function rowdef(label, data, expected_status)
      {
        this.label = label;
        this.data = data;
        this.expected_status = expected_status;
      }

      var rows =
      [
/* The spec says that 100-ranges status codes should be ignored.
          new rowdef( "rc 100"                       , "rc=100"              , "true"  )
        , new rowdef( "rc 300, redirected to rc 100" , "rc=300&redirect=100" , "true"  )
*/
          new rowdef( "rc 200"                       , "rc=200"              , "true"  )
        , new rowdef( "rc 400"                       , "rc=400"              , "false" )
        , new rowdef( "rc 500"                       , "rc=500"              , "false" )
        , new rowdef( "rc 300, redirected to rc 200" , "rc=300&redirect=200" , "true"  )
        , new rowdef( "rc 300, redirected to rc 400" , "rc=300&redirect=400" , "false" )
        , new rowdef( "rc 300, redirected to rc 500" , "rc=300&redirect=500" , "false" )
      ];

      j = rows.length;

      function constructRow(i)
      {
        var svgNS = "http://www.w3.org/2000/svg";
        var rowstart = 25;
        var rowheight = 20;

        // Create row
        var row = document.createElementNS(svgNS, "g");
        row.setAttribute("transform", "translate(0," + (rowstart + (rowheight*i)) + ")");

        // Create row label
        var rowlabel = document.createElementNS(svgNS, "text");
        rowlabel.setAttribute( "id"          , "rowlabel" + i );
        rowlabel.setAttribute( "text-anchor" , "end"          );
        rowlabel.setAttribute( "fill"        , "black"        );
        rowlabel.textContent = rows[i].label;
        row.appendChild(rowlabel);

        // Create expected box
        var expected = document.createElementNS(svgNS, "rect");
        expected.setAttribute( "id"     , "expected" + i );
        expected.setAttribute( "x"      , "30"           );
        expected.setAttribute( "y"      , "-15"          );
        expected.setAttribute( "width"  , "18"           );
        expected.setAttribute( "height" , "18"           );

        if(rows[i].expected_status == "none")
        {
          expected.setAttribute( "fill", "red" );
        }
        else if(rows[i].expected_status == "true")
        {
                expected.setAttribute( "fill", "green" );
        }
        else if(rows[i].expected_status == "false")
        {
                expected.setAttribute( "fill", "lime" );
        }
        else
        {
          // This should not happen.
                expected.setAttribute( "fill", "yellow" );
        }
        row.appendChild(expected);

        // Create actual box
        var actual = document.createElementNS(svgNS, "rect");
        actual.setAttribute( "id"     , "actual" + i );
        actual.setAttribute( "x"      , "80"        );
        actual.setAttribute( "y"      , "-15"        );
        actual.setAttribute( "width"  , "18"         );
        actual.setAttribute( "height" , "18"         );
        actual.setAttribute( "fill"   , "gray"       );
        row.appendChild(actual);

        // Append row
        rowgroup.appendChild(row);
      }

      function updateStatus(id,status)
      {
        var res = document.getElementById(id);
        if(status.success)
        {
          res.setAttribute("fill", "green");
        }
        else
        {
          res.setAttribute("fill", "lime");
        }
        
        --j;

        if (j == 0)
        {
          //test is complete
          var finished_elmt = document.getElementById("test_status");
          finished_elmt.textContent = "Callbacks now finished";
          finished_elmt.setAttribute("fill", "green");
        }
      }

      function callback(i)
      {
        this.fn = function(status) { updateStatus("actual" + i, status); };
      }

      var callbacks = new Array(rows.length);

      function onLoad(evt)
      {
        var type = "application/x-www-form-urlencoded";
        var encoding = "utf-8";
        for(var i = 0; i < rows.length; i++)
        {
          constructRow(i);
          callbacks[i] = new callback(i);
          postURL(servlet_url, rows[i].data, callbacks[i].fn, type, encoding);
        }
      }

      script1.addEventListener("load", onLoad, false);
    ]]>
    </script>

    <g xml:id="status-legend" transform="translate(20,300)">
      <g transform="translate(0,0)">
        <rect xml:id="nonerect" x="0" y="-15" width="18" height="18" fill="red"/>
        <text xml:id="nonetxt" text-anchor="start" x="30" y="0" fill="black">no status</text>
      </g>
      <g transform="translate(150,0)">
        <rect xml:id="falserect" x="0" y="-15" width="18" height="18" fill="lime"/>
        <text xml:id="falsetxt" text-anchor="start" x="30" y="0" fill="black">status=false</text>
      </g>
      <g transform="translate(320,0)">
        <rect xml:id="truerect" x="0" y="-15" width="18" height="18" fill="green"/>
        <text xml:id="truetxt" text-anchor="start" x="30" y="0" fill="black">status=true</text>
      </g>
    </g>

    <text x="100" y="250" xml:id="test_status" fill="red">Callbacks not yet finished</text>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none" fill="black">$Revision: 1.5 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000" />
  <!-- comment out this watermark once the test is approved -->
  <!--<g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>-->
</svg>

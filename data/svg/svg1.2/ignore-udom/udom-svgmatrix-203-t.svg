<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="ED" owner="AE" desc="Test SVGMatrix.mMultiply" status="accepted"
    approved="yes"
    version="$Revision: 1.7 $" testname="$RCSfile: udom-svgmatrix-203-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This test creates a few SVGMatrix objects and calls mMultiply.
        To pass, the result matrices should be correct, and when this happens the text
        changes from 'failed' to 'passed'.
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-svgmatrix-203-t.svg,v $</title>
  <defs>
    <font-face
      font-family="SVGFreeSansASCII"
      unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii"/>
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">

    <handler type="text/ecmascript" xe:event="SVGLoad">
      <![CDATA[
  
      var svg_ns = "http://www.w3.org/2000/svg";
      var xlink_ns = "http://www.w3.org/1999/xlink";
  
      var count=0;
      var topsvg = document.documentElement;
      var startY = 80;
      var rowHeight = 20;
      var isPassed = true;
  
      function drawString( text , col )
      {
        node_to_insert=document.createElementNS(svg_ns,"text");
        node_to_insert.setAttributeNS(null,"x","25");	
        var yVal = startY + count++ * rowHeight;
        node_to_insert.setAttributeNS(null, "y",  yVal.toString()  );
        node_to_insert.textContent=text ;
        node_to_insert.setAttributeNS(null, "fill", col );
        document.getElementById( "test-body-content" ).appendChild(node_to_insert);                       
      }

      function verifyMatrix( matrix, expected, epsilon )
      {
        if
        (
          ( Math.abs(matrix.getComponent(0) - expected[0]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(1) - expected[1]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(2) - expected[2]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(3) - expected[3]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(4) - expected[4]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(5) - expected[5]) < epsilon )
        )
        {
          drawString( "Results match expected values." , "green" );
        }
        else
        {
          isPassed = false;
          drawString( "Results do not match expected values!" , "red" );
          drawString( "expected: " + expected[0].toString() + " " 
                                   + expected[1].toString() + " " 
                                   + expected[2].toString() + " " 
                                   + expected[3].toString() + " " 
                                   + expected[4].toString() + " " 
                                   + expected[5].toString() , "red" );
        }
      }
  
      var matrix;
      var matrix2;
      var matrix3;
      var expected;
  
      try
      {
        matrix = topsvg.createSVGMatrixComponents( 1, 0, 0, 1, 5, 5 );
        drawString( "created SVGMatrix (A): " + matrix.getComponent(0).toString() + " " 
                                              + matrix.getComponent(1).toString() + " " 
                                              + matrix.getComponent(2).toString() + " " 
                                              + matrix.getComponent(3).toString() + " " 
                                              + matrix.getComponent(4).toString() + " " 
                                              + matrix.getComponent(5).toString() , "black" );

        matrix2 = topsvg.createSVGMatrixComponents( 1, 0, 0, 1, 10, 10 );
        drawString( "created SVGMatrix (B): " + matrix2.getComponent(0).toString() + " " 
                                              + matrix2.getComponent(1).toString() + " " 
                                              + matrix2.getComponent(2).toString() + " " 
                                              + matrix2.getComponent(3).toString() + " " 
                                              + matrix2.getComponent(4).toString() + " " 
                                              + matrix2.getComponent(5).toString() , "black" );
  
        matrix3 = matrix.mMultiply( matrix2 );
        drawString( "(C) = (A).mMultiply(B): " + matrix3.getComponent(0).toString() + " " 
                                               + matrix3.getComponent(1).toString() + " " 
                                               + matrix3.getComponent(2).toString() + " " 
                                               + matrix3.getComponent(3).toString() + " " 
                                               + matrix3.getComponent(4).toString() + " " 
                                               + matrix3.getComponent(5).toString() , "black" );
  
        expected = [ 1, 0, 0, 1, 15, 15 ];
        expected2 = [ 1, 0, 0, 1, 10, 10 ];
        var epsilon = 1 / 65535; // epsilon for 16.16 fixpoint
        verifyMatrix( matrix3, expected, epsilon ); 
        verifyMatrix( matrix, expected, epsilon );
        verifyMatrix( matrix2, expected2, epsilon );
  
        if ( isPassed )
        {
          var status = document.getElementById("TestStatus");
          status.setTrait("#text", "passed");
          status.setAttribute("fill", "green");
        }
      }
      catch(e)
      {
        isPassed = false;
        drawString( "Unexpected exception!" , "red" );
      }
        
    ]]>
    </handler>

    <text  x="240" y="40" text-anchor="middle" >SVGMatrix.mMultiply() - basic test</text>

    <rect x="330" y="315" width="130" height="40" stroke="blue" fill="none"/>
    <g fill="red">
      <text xml:id="TestStatus" x="333" y="350" font-size="40">failed</text>
    </g>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none"
      fill="black">$Revision: 1.7 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000"/>
  <!-- comment out this watermark once the test is approved -->
  <!--<g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>-->
</svg>

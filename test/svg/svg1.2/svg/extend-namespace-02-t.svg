<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="AE" owner="JF" desc="Test the use of multiple namespaces." status="accepted"
    approved="yes"
    version="$Revision: 1.9 $" testname="$RCSfile: extend-namespace-02-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>Test mixing a business data namespace with elements in SVG namespace.</p>
      <p>
        The test case uses a different namespace to hold fake sales data. Using ECMAScript to make calls to the DOM,
        the test case extracts the sales data and then makes calls to the SVG DOM to build up a 'path' element and a
        'text' element for each individual pie slice.
      </p>
      <p>
        The result should show five pie slices. The first pie slice should be exploded, with a pink fill and a blue border.
        The other pie slices should have various levels of gray fill and black borders. The name of each region should
        appear in black towards the center of the pie slice.
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: extend-namespace-02-t.svg,v $</title>
  <defs>
    <font-face font-family="SVGFreeSansASCII" unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii" />
      </font-face-src>
    </font-face>
  </defs>

  <!-- Note that this is part of the test -->
  <handler xe:event="SVGLoad">
    onLoad(evt);
  </handler>

  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">
    <defs>
      <script type="text/ecmascript">
        <![CDATA[
        var svg_ns = "http://www.w3.org/2000/svg";
        var bd_ns = "http://example.org/ExampleBusinessData";
    
    function addChildren(elm, ns, name, list)
    {
      if(elm.localName == name && elm.namespaceURI == ns)
      {
        list.push(elm);
      }
      
      var child = elm.firstElementChild;
      while(child)
      {
        addChildren(child, ns, name, list);
        child = child.nextElementSibling;
      }
    }
    
    function makeArc(dAttribute, steps, startAngle, endAngle)
    {
      var angle = startAngle;
      var angleInc = (endAngle-startAngle) / (steps-1);
      for(i = 0; i < steps; i++)
      {
        dAttribute = dAttribute + "L" + Math.round(240+100*Math.cos(angle));
        dAttribute = dAttribute + " " + Math.round(170+100*Math.sin(angle));
        angle+=angleInc;
      }
      dAttribute = dAttribute + 'z';
      return dAttribute;
    }
    
    function onLoad(evt)
    {
      // Get Document
                var svgElement = evt.target;
      var doc = svgElement.ownerDocument;
      
      var resultsElement = doc.getElementById('results');
      var gElement = doc.getElementById('PieParent');
      
          // Count the number of regions.
          regionCount = 5;
          RegionNodeList = new Array();
          RegionNodeList.push( doc.getElementById( "r1" ) );
          RegionNodeList.push( doc.getElementById( "r2" ) );
          RegionNodeList.push( doc.getElementById( "r3" ) );
          RegionNodeList.push( doc.getElementById( "r4" ) );
          RegionNodeList.push( doc.getElementById( "r5" ) );
          
          RegionNameNodeList = new Array();
          RegionNameNodeList.push(  RegionNodeList[0].firstElementChild );  
          RegionNameNodeList.push(  RegionNodeList[1].firstElementChild );  
          RegionNameNodeList.push(  RegionNodeList[2].firstElementChild );  
          RegionNameNodeList.push(  RegionNodeList[3].firstElementChild );  
          RegionNameNodeList.push(  RegionNodeList[4].firstElementChild );  

          RegionResultNodeList = new Array();
          RegionResultNodeList.push(  RegionNodeList[0].firstElementChild.nextElementSibling );  
          RegionResultNodeList.push(  RegionNodeList[1].firstElementChild.nextElementSibling );  
          RegionResultNodeList.push(  RegionNodeList[2].firstElementChild.nextElementSibling );  
          RegionResultNodeList.push(  RegionNodeList[3].firstElementChild.nextElementSibling );  
          RegionResultNodeList.push(  RegionNodeList[4].firstElementChild.nextElementSibling );  

          // Get the sum of the values of the regions.
          var total = 0;
          for (regionIndex = 0; regionIndex< regionCount; regionIndex++)
      {
      total = total + Number(RegionResultNodeList[regionIndex].textContent);
      }
      
          // Build a pie chart.
          var startAngle = 0;
          for (regionIndex = 0; regionIndex< regionCount; regionIndex++) 
      {
            regionName = RegionNameNodeList[regionIndex].textContent;
            regionResult = Number(RegionResultNodeList[regionIndex].textContent);
            // Build the pie slice.
            textElement = doc.createElementNS(svg_ns, "text");
            textElement.textContent = regionName;
            pathElement = doc.createElementNS(svg_ns, "path");
            endAngle = startAngle - regionResult * Math.PI * 2 / total;
            dAttribute = "M240,170";
            gray =  Math.round(Number(255 * (regionIndex+2)) / (regionCount+2));
            midAngle = (startAngle + endAngle) / 2;
            textElement.setAttributeNS(null, "x", Math.round(240+65*Math.cos(midAngle)));
            textElement.setAttributeNS(null, "y", Math.round(170+65*Math.sin(midAngle)));
      
      dAttribute = makeArc(dAttribute, 10, startAngle, endAngle);
      
            pathElement.setAttributeNS(null, "d", dAttribute);
            pathElement.setAttributeNS(null, "fill", "rgb("+gray+","+gray+","+gray+")");
            pathElement.setAttributeNS(null, "stroke", "black");
            pathElement.setAttributeNS(null, "stroke-width", "2");
            // Temporary, for CSS styling.
            pathElement.setAttributeNS(null, "fill", "rgb("+gray+","+gray+","+gray+")");
            pathElement.setAttributeNS(null, "stroke", "black");
            pathElement.setAttributeNS(null, "stroke-width", "2");
            if (regionIndex == 0) 
      {
              var firstSliceOffset = 30;
              var transformValue = "translate(" + 
                                       Math.round(firstSliceOffset * Math.cos(midAngle)) +
                                       "," + 
                                       Math.round(firstSliceOffset * Math.sin(midAngle)) + 
                                       ")";
              pathElement.setAttributeNS(null, "transform", transformValue);
              textElement.setAttributeNS(null, "transform", transformValue);
              pathElement.setAttributeNS(null, "fill", "#FF6666");
              pathElement.setAttributeNS(null, "stroke", "#0000FF");
              pathElement.setAttributeNS(null, "stroke-width", "3");
              // Temporary, for CSS styling.
              pathElement.setAttributeNS(null, "fill", "#FF8888");
              pathElement.setAttributeNS(null, "stroke", "#0000FF");
              pathElement.setAttributeNS(null, "stroke-width", "3");
            }
            gElement.appendChild(pathElement);
            gElement.appendChild(textElement);
            startAngle = endAngle;
          }
        }
        ]]>
      </script>
    </defs>
    <g xmlns:bd="http://example.org/ExampleBusinessData">
      <bd:Results xml:id="results">
        <bd:Region xml:id="r1">
          <bd:RegionName>East</bd:RegionName>
          <bd:RegionResult>3</bd:RegionResult>
        </bd:Region>
        <bd:Region xml:id="r2">
          <bd:RegionName>North</bd:RegionName>
          <bd:RegionResult>4</bd:RegionResult>
        </bd:Region>
        <bd:Region xml:id="r3">
          <bd:RegionName>West</bd:RegionName>
          <bd:RegionResult>5</bd:RegionResult>
        </bd:Region>
        <bd:Region xml:id="r4">
          <bd:RegionName>Central</bd:RegionName>
          <bd:RegionResult>3.2</bd:RegionResult>
        </bd:Region>
        <bd:Region xml:id="r5">
          <bd:RegionName>South</bd:RegionName>
          <bd:RegionResult>6</bd:RegionResult>
        </bd:Region>
      </bd:Results>
      <text font-size="16" text-anchor="middle" x="240" y="30"> Pie chart built from data in a different namespace. </text>
    </g>
    <g xml:id="PieParent" font-family="Arial" text-anchor="middle" font-size="14">
      <desc>Pie chart is built within this 'g' element</desc>
    </g>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none"
      fill="black">$Revision: 1.9 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000"/>
  <!-- comment out this watermark once the test is approved -->
  <g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>
</svg>

<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="CL" owner="AE" desc="Test SVGSVGElement.setCurrentTime" status="accepted"
    approved="yes"
    version="$Revision: 1.5 $" testname="$RCSfile: udom-svg-227-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        Tests setCurrentTime. The test is passed if the the moving bar skips
        from 2 to 4 , and from 5 to 8; and after the animation completes, the
        text "passed" appears at the bottom right.
      </p>
      <p>
        Four animations begin at time 0 and end at times 1, 2, 5 and 9 seconds.
        Event listeners are registered for the "endEvent" event.
        As each animation ends, getCurrentTime() is called to verify the expected current time, which
        is them followed by a call to setCurrentTime.
        If all times have the expected values, the text changes from 'testing' to 'passed'
        The expected time is compared with
        the minimum time to take into account implementation-specific document time resolution.
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-svg-227-t.svg,v $</title>
  <defs>
    <font-face
      font-family="SVGFreeSansASCII"
      unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii"/>
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">

    <handler type="text/ecmascript" xe:event="SVGLoad">
      <![CDATA[
  
      var svg_ns = "http://www.w3.org/2000/svg";
      var xlink_ns = "http://www.w3.org/1999/xlink";
      
      var count=0;
      var topsvg = document.documentElement;
      var translate = topsvg.currentTranslate;
      
      var startY = 80;
      var rowHeight = 15;
      var fontSize = "10";
      var isPassed = true;
  
      function drawString( text )
      {
        node_to_insert=document.createElementNS(svg_ns,"text");
        node_to_insert.setAttributeNS(null,"font-size", fontSize);	
        node_to_insert.setAttributeNS(null,"x","25");	
        var yVal = startY + count++ * rowHeight;
        node_to_insert.setAttributeNS(null, "y",  yVal.toString()  );
        node_to_insert.textContent=text ;
        document.getElementById( "test-body-content" ).appendChild(node_to_insert);                       
      }
  
      function updateStatus()
      {
        var status = document.getElementById("TestStatus");
        if ( isPassed )
        {
          status.setTrait("#text", "passed");
        }
        else
        {
          status.setTrait("#text", "failed");
        }
      }
  
      var status = document.getElementById("TestStatus");
      status.setTrait("#text", "testing");
  
      
      {
     
        function doTimer1( )
        {
          curTime = topsvg.getCurrentTime( );
          if ( curTime >= 1 )
          {
            drawString( "currentTime:  1");
          }
          else
          {
            isPassed = false;
            drawString( "currentTime: " + curTime + ", expecting 1" );
          }
        }
      
       function doTimer2( )
        {
          curTime = topsvg.getCurrentTime( );
          if ( curTime >= 2 )
          {
            drawString( "currentTime:  2");
          }
          else
          {
            isPassed = false;
            drawString( "currentTime: " + curTime + ", expecting 2" );
          }
      
          drawString( "setCurrentTime to 4" );
          topsvg.setCurrentTime( 4 );
      
          curTime = topsvg.getCurrentTime( );
          if ( curTime >= 4 )
          {
            drawString( "currentTime:  4");
          }
          else
          {
            isPassed = false;
            drawString( "currentTime: " + curTime + ", expecting 4" );
          }       
        }
              
        function doTimer3( )
        {
          curTime = topsvg.getCurrentTime( );
          if ( curTime >= 5 )
          {
            drawString( "currentTime:  5");
          }
          else
          {
            isPassed = false;
            drawString( "currentTime: " + curTime + ", expecting 5" );
          }
        
          drawString( "setCurrentTime to 8" );
          topsvg.setCurrentTime( 8 );
      
          curTime = topsvg.getCurrentTime( );
          if ( curTime >= 8 )
          {
            drawString( "currentTime:  8");
          }
          else
          {
            isPassed = false;
            drawString( "currentTime: " + curTime + ", expecting 1" );
          }
        }
        
        function doTimer4( )
        {
          curTime = topsvg.getCurrentTime( );
          if ( curTime >= 9 && curTime < 9.1 )
          {
            drawString( "currentTime:  9");
          }
          else
          {
            isPassed = false;
            drawString( "currentTime: " + curTime + ", expecting 2" );
          }
  
          updateStatus();
        }
        
        
        document.getElementById("animationTimer1").addEventListener("endEvent", doTimer1, false);
        document.getElementById("animationTimer2").addEventListener("endEvent", doTimer2, false);
        document.getElementById("animationTimer3").addEventListener("endEvent", doTimer3, false);
        document.getElementById("animationTimer4").addEventListener("endEvent", doTimer4, false);
      
        drawString( "currentTime: " + topsvg.getCurrentTime( ) );
      }
   
      ]]>
    </handler>

    <defs>
      <g xml:id="myScale">
        <line x1="0" y1="0" x2="100" y2="0" stroke="black" stroke-width="3"/>
        <g text-anchor="middle" transform="translate(0,10)" font-size="8" fill="#555">
          <text x="0">0</text>
          <text x="10">1</text>
          <text x="20">2</text>
          <text x="30">3</text>
          <text x="40">4</text>
          <text x="50">5</text>
          <text x="60">6</text>
          <text x="70">7</text>
          <text x="80">8</text>
          <text x="90">9</text>
          <text x="100">10</text>
        </g>
      </g>
    </defs>

    <g>
      <text x="240" y="40" text-anchor="middle">SVGSVGElement.setCurrentTime() - basic test</text>
      <g xml:id="anim2" transform="translate( 200, 75 )">
        <use xlink:href="#myScale"/>
        <rect transform="translate(-2.5,-7)" width="5" height="14" fill="blue" fill-opacity="0.4" >
          <animate attributeName="x" from="0" to="100" dur="10" fill="freeze"/>
        </rect>
        <animate xml:id="animationTimer1" attributeName="display" begin="0" dur="1s" from="inline" to="inline"/>
        <animate xml:id="animationTimer2" attributeName="display" begin="0" dur="2s" from="inline"  to="inline"/>
        <animate xml:id="animationTimer3" attributeName="display" begin="0" dur="5s" from="inline"  to="inline"/>
        <animate xml:id="animationTimer4" attributeName="display" begin="0" dur="9s" from="inline"  to="inline"/>
      </g>

      <rect  x="330" y="315" width="130" height="40" stroke="blue" fill="none"/>
      <g fill="black">
        <text xml:id="TestStatus" x="333" y="350" font-size="40">failed</text>
      </g>
    </g>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none"
      fill="black">$Revision: 1.5 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000"/>
  <!-- comment out this watermark once the test is approved -->
  <!--<g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>-->
</svg>

<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="ED" owner="AE" desc="Test SVGMatrix.mRotate" status="accepted"
    approved="yes"
    version="$Revision: 1.7 $" testname="$RCSfile: udom-svgmatrix-204-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This test creates some SVGMatrix objects and then calls mRotate.
        To pass, the result matrices should be correct, and when this happens the text
        changes from 'failed' to 'passed'.
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-svgmatrix-204-t.svg,v $</title>
  <defs>
    <font-face
      font-family="SVGFreeSansASCII"
      unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii"/>
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">

    <handler type="text/ecmascript" xe:event="SVGLoad">
      <![CDATA[

    var svg_ns = "http://www.w3.org/2000/svg";
    var xlink_ns = "http://www.w3.org/1999/xlink";

    var count=0;
    var topsvg = document.documentElement;
    var startY = 65;
    var rowHeight = 10;
    var isPassed = true;
    var eps = 1 / 65535; // 16.16 fixpoint epsilon

    function drawString( text )
    {
      node_to_insert=document.createElementNS(svg_ns,"text");
      node_to_insert.setAttributeNS(null,"x","25");
      node_to_insert.setAttributeNS(null,"font-size",rowHeight*0.8);
      var yVal = startY + count++ * rowHeight;
      node_to_insert.setAttributeNS(null, "y",  yVal.toString()  );
      node_to_insert.textContent=text ;
      document.getElementById( "test-body-content" ).appendChild(node_to_insert);
    }

    function drawResultString( text, result )
    {
      node_to_insert=document.createElementNS(svg_ns,"text");
      node_to_insert.setAttributeNS(null,"x","25");
      node_to_insert.setAttributeNS(null,"font-size",rowHeight*0.8);
      if (result)
      {
        node_to_insert.setAttributeNS(null, "fill", "green");
      }
      else
      {
        node_to_insert.setAttributeNS(null, "fill", "red");
      }
      var yVal = startY + count++ * rowHeight;
      node_to_insert.setAttributeNS(null, "y",  yVal.toString()  );
      node_to_insert.textContent=text ;
      document.getElementById( "test-body-content" ).appendChild(node_to_insert);
    }

    function verifyMatrix( matrix, expected, epsilon )
    {
      if
      (
        ( Math.abs(matrix.getComponent(0) - expected[0]) < epsilon ) &&
        ( Math.abs(matrix.getComponent(1) - expected[1]) < epsilon ) &&
        ( Math.abs(matrix.getComponent(2) - expected[2]) < epsilon ) &&
        ( Math.abs(matrix.getComponent(3) - expected[3]) < epsilon ) &&
        ( Math.abs(matrix.getComponent(4) - expected[4]) < epsilon ) &&
        ( Math.abs(matrix.getComponent(5) - expected[5]) < epsilon )
      )
      {
        drawResultString( "Results match expected values.", true );
      }
      else
      {
        isPassed = false;
        drawResultString( "Results do not match expected values!", false );
        drawResultString( "expected: " + expected[0].toString() + " " 
                                  + expected[1].toString() + " " 
                                  + expected[2].toString() + " " 
                                  + expected[3].toString() + " " 
                                  + expected[4].toString() + " " 
                                  + expected[5].toString(), false );
      }
    }

    try
    {
      var matrix2 = topsvg.createSVGMatrixComponents( 1, 0, 0, 1, 10, 10 );
      drawString( "created SVGMatrix (A): " + matrix2.getComponent(0).toString() + " " 
                                            + matrix2.getComponent(1).toString() + " " 
                                            + matrix2.getComponent(2).toString() + " " 
                                            + matrix2.getComponent(3).toString() + " " 
                                            + matrix2.getComponent(4).toString() + " " 
                                            + matrix2.getComponent(5).toString() );

      var matrix7 = matrix2.mRotate( 90 );
      drawString( "(B) = (A).mRotate(90): " + matrix7.getComponent(0).toString() + " " 
                                            + matrix7.getComponent(1).toString() + " " 
                                            + matrix7.getComponent(2).toString() + " " 
                                            + matrix7.getComponent(3).toString() + " " 
                                            + matrix7.getComponent(4).toString() + " " 
                                            + matrix7.getComponent(5).toString() );

      var expected = [ 0, 1, -1, 0, 10, 10 ];
      verifyMatrix( matrix7, expected, eps );
      verifyMatrix( matrix2, expected, eps );

      var matrix8 = matrix7.mRotate( 90 );
      drawString( "(C) = (B).mRotate(90): " + matrix8.getComponent(0).toString() + " " 
                                            + matrix8.getComponent(1).toString() + " " 
                                            + matrix8.getComponent(2).toString() + " " 
                                            + matrix8.getComponent(3).toString() + " " 
                                            + matrix8.getComponent(4).toString() + " " 
                                            + matrix8.getComponent(5).toString() );

      expected = [ -1, 0, 0, -1, 10, 10 ];
      verifyMatrix( matrix8, expected, eps );
      verifyMatrix( matrix7, expected, eps );

      var matrix9 = matrix8.mRotate( 90 );
      drawString( "(D) = (C).mRotate(90): " + matrix9.getComponent(0).toString() + " " 
                                            + matrix9.getComponent(1).toString() + " " 
                                            + matrix9.getComponent(2).toString() + " " 
                                            + matrix9.getComponent(3).toString() + " " 
                                            + matrix9.getComponent(4).toString() + " " 
                                            + matrix9.getComponent(5).toString() );

      expected = [ 0, -1, 1, 0, 10, 10 ];
      verifyMatrix( matrix9, expected, eps );
      verifyMatrix( matrix8, expected, eps );

      var matrix3 = matrix9.mRotate( 90 );
      drawString( "(E) = (D).mRotate(90): " + matrix3.getComponent(0).toString() + " " 
                                            + matrix3.getComponent(1).toString() + " " 
                                            + matrix3.getComponent(2).toString() + " " 
                                            + matrix3.getComponent(3).toString() + " " 
                                            + matrix3.getComponent(4).toString() + " " 
                                            + matrix3.getComponent(5).toString() );

      expected = [ 1, 0, 0, 1, 10, 10 ];
      verifyMatrix( matrix3, expected, eps );
      verifyMatrix( matrix9, expected, eps );

      var matrix4 = matrix3.mRotate( 450 );
      drawString( "(B) = (E).mRotate(450): " + matrix4.getComponent(0).toString() + " " 
                                            + matrix4.getComponent(1).toString() + " " 
                                            + matrix4.getComponent(2).toString() + " " 
                                            + matrix4.getComponent(3).toString() + " " 
                                            + matrix4.getComponent(4).toString() + " " 
                                            + matrix4.getComponent(5).toString() );

      expected = [ 0, 1, -1, 0, 10, 10 ];
      verifyMatrix( matrix4, expected, eps );
      verifyMatrix( matrix9, expected, eps );

      var matrix5 = matrix9.mRotate( -540 );
      drawString( "(D) = (B).mRotate(-540): " + matrix5.getComponent(0).toString() + " " 
                                            + matrix5.getComponent(1).toString() + " " 
                                            + matrix5.getComponent(2).toString() + " " 
                                            + matrix5.getComponent(3).toString() + " " 
                                            + matrix5.getComponent(4).toString() + " " 
                                            + matrix5.getComponent(5).toString() );

      expected = [ 0, -1, 1, 0, 10, 10 ];
      verifyMatrix( matrix5, expected, eps );
      verifyMatrix( matrix9, expected, eps );


      if ( isPassed )
      {
        var status = document.getElementById("TestStatus");
        status.setTrait("#text", "passed");
        status.setAttribute("fill", "green");
      }
    }
    catch(e)
    {
      isPassed = false;
      drawString("Unexpected exception!");
    }
  ]]>
    </handler>

    <text  x="240" y="40" text-anchor="middle" >SVGMatrix.mRotate() - basic test</text>

    <rect x="330" y="315" width="130" height="40" stroke="blue" fill="none"/>
    <g fill="red">
      <text xml:id="TestStatus" x="333" y="350" font-size="40">failed</text>
    </g>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none"
      fill="black">$Revision: 1.7 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000"/>
  <!-- comment out this watermark once the test is approved -->
  <!--<g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>-->
</svg>

<?xml version="1.0" encoding="UTF-8"?>
<svg version="1.2" baseProfile="tiny" xml:id="svg-root" width="100%" height="100%"
  viewBox="0 0 480 360" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xe="http://www.w3.org/2001/xml-events">
  <!--======================================================================-->
  <!--=  Copyright 2008 World Wide Web Consortium, (Massachusetts          =-->
  <!--=  Institute of Technology, European Research Consortium for         =-->
  <!--=  Informatics and Mathematics (ERCIM), Keio University).            =-->
  <!--=  All Rights Reserved.                                              =-->
  <!--=  See http://www.w3.org/Consortium/Legal/.                          =-->
  <!--======================================================================-->
  <SVGTestCase xmlns="http://www.w3.org/2000/02/svg/testsuite/description/"
    reviewer="ED" owner="AE" desc="Test SVGMatrix.inverse" status="accepted"
    approved="yes"
    version="$Revision: 1.7 $" testname="$RCSfile: udom-svgmatrix-202-t.svg,v $">
    <d:OperatorScript xmlns:d="http://www.w3.org/2000/02/svg/testsuite/description/" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This test creates two SVGMatrix objects and calls inverse on each.
        The first matrix is invertable, but the second one is not, and should throw an exception when inverse() is called.
        To pass, the inverted matrix must be correct, and the exception for the second matrix must be thrown.
        To indicate a pass the result of the test changes to green and the text at the bottom right
        hand corner changes from "failed" to "passed".
      </p>
    </d:OperatorScript>
  </SVGTestCase>
  <title xml:id="test-title">$RCSfile: udom-svgmatrix-202-t.svg,v $</title>
  <defs>
    <font-face
      font-family="SVGFreeSansASCII"
      unicode-range="U+0-7F">
      <font-face-src>
        <font-face-uri xlink:href="../images/SVGFreeSans.svg#ascii"/>
      </font-face-src>
    </font-face>
  </defs>
  <g xml:id="test-body-content" font-family="SVGFreeSansASCII,sans-serif" font-size="18">

    <handler type="text/ecmascript" xe:event="SVGLoad">
      <![CDATA[
  
      var svg_ns = "http://www.w3.org/2000/svg";
      var xlink_ns = "http://www.w3.org/1999/xlink";
  
      var count=0;
      var topsvg = document.documentElement;
      var startY = 80;
      var rowHeight = 20;
      var isPassed = true;
      var fontSize = "10";

      function drawString( text, color )
      {
        node_to_insert=document.createElementNS(svg_ns,"text");
        node_to_insert.setAttributeNS(null,"font-size",fontSize);	
        var xVal = 5;
        node_to_insert.setAttributeNS(null,"x", xVal.toString() );	
        var yVal = startY + count++ * rowHeight;
        node_to_insert.setAttributeNS(null, "y",  yVal.toString()  );
        node_to_insert.setAttributeNS(null, "fill",  color  );
        node_to_insert.textContent=text ;
        document.getElementById( "test-body-content" ).appendChild(node_to_insert);
       
      }

      function verifyMatrix( matrix, expected, epsilon )
      {
        if
        (
          ( Math.abs(matrix.getComponent(0) - expected[0]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(1) - expected[1]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(2) - expected[2]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(3) - expected[3]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(4) - expected[4]) < epsilon ) &&
          ( Math.abs(matrix.getComponent(5) - expected[5]) < epsilon )
        )
        {
          drawString( "Results match expected values.", "green" );
        }
        else
        {
          isPassed = false;
          drawString( "Results do not match expected values!", "red" );
          drawString( "expected: " + expected[0].toString() + " " 
                                   + expected[1].toString() + " " 
                                   + expected[2].toString() + " " 
                                   + expected[3].toString() + " " 
                                   + expected[4].toString() + " " 
                                   + expected[5].toString(), "black" );
        }
      }
  
      try
      {
        var matrix2 = topsvg.createSVGMatrixComponents( 1, 0, 0, 1, 10, 10 );
        drawString( "created SVGMatrix (A): " + matrix2.getComponent(0).toString() + " " 
                                              + matrix2.getComponent(1).toString() + " " 
                                              + matrix2.getComponent(2).toString() + " " 
                                              + matrix2.getComponent(3).toString() + " " 
                                              + matrix2.getComponent(4).toString() + " " 
                                              + matrix2.getComponent(5).toString() , "black");
        var matrix3 = matrix2.inverse();
        drawString( "(A).inverse(): " + matrix3.getComponent(0).toString() + " " 
                                      + matrix3.getComponent(1).toString() + " " 
                                      + matrix3.getComponent(2).toString() + " " 
                                      + matrix3.getComponent(3).toString() + " " 
                                      + matrix3.getComponent(4).toString() + " " 
                                      + matrix3.getComponent(5).toString() ,"black");
  
        var expected = [ 1, 0, 0, 1, -10, -10 ];
        verifyMatrix( matrix3, expected, 1 / 65535 ); // epsilon for 16.16 fixpoint
      }
      catch(e)
      {
        isPassed = false;
        drawString("Unexpected exception!", "red");
      }
      
      var matrix2 = topsvg.createSVGMatrixComponents( 0, 0, 0, 0, 10, 10 );
      drawString( "created SVGMatrix (B): " + matrix2.getComponent(0).toString() + " " 
                                            + matrix2.getComponent(1).toString() + " " 
                                            + matrix2.getComponent(2).toString() + " " 
                                            + matrix2.getComponent(3).toString() + " " 
                                            + matrix2.getComponent(4).toString() + " " 
                                            + matrix2.getComponent(5).toString() , "black");
      try
      {
        var matrix3 = matrix2.inverse();
      }
      catch(e)
      {
        if(e.code == SVGException.SVG_MATRIX_NOT_INVERTABLE)
        {
          drawString("(B).inverse(): Got SVG_MATRIX_NOT_INVERTABLE.", "green");
        }
        else
        {
          drawString("(B).inverse(): Expected SVG_MATRIX_NOT_INVERTABLE.", "red");
          isPassed = false;
        }
      }
      
      if ( isPassed )
      {
        var status = document.getElementById("TestStatus");
        status.setTrait("#text", "passed");
        status.setAttribute("fill", "green");
      }
  ]]>
    </handler>

    <g>

      <text  x="240" y="40" text-anchor="middle" >SVGMatrix.inverse() - basic test</text>

      <rect x="330" y="315" width="130" height="40" stroke="blue" fill="none"/>
      <g fill="black">
        <text xml:id="TestStatus" x="333" y="350" font-size="40">failed</text>
      </g>
    </g>
  </g>
  <g font-family="SVGFreeSansASCII,sans-serif" font-size="32">
    <text xml:id="revision" x="10" y="340" stroke="none"
      fill="black">$Revision: 1.7 $</text>
  </g>
  <rect xml:id="test-frame" x="1" y="1" width="478" height="358" fill="none" stroke="#000"/>
  <!-- comment out this watermark once the test is approved -->
  <!--<g xml:id="draft-watermark">
    <rect x="1" y="1" width="478" height="20" fill="red" stroke="black" stroke-width="1"/>
    <text font-family="SVGFreeSansASCII,sans-serif" font-weight="bold" font-size="20" x="240"
      text-anchor="middle" y="18" stroke-width="0.5" stroke="black" fill="white">DRAFT</text>
  </g>-->
</svg>
